WordPress Development Tutorial

0. One Rule to Rule them All - One cardinal rule in WordPress development, it’s this: Don’t touch WordPress core

1. Two ways to create a plugin.
Object-Oriented Programming - a programming technique that uses a grouping (class) of related methods (functions) to define a computer program or part of a computer program.
Functional Programming - using the internal functions provided by WordPress to hook into their platform.

2. PHP Scripting Conventions (PHP Standard Recommendation) - PSR-1 & PSR-2 Compliance - USE INLINE DOCUMENTATION

/**
 * Summary.
 *
 * Description.
 *
 * @since x.x.x
 * @depreciated x.x.x Use new_function_name()
 * @see Function/method/class relied on
 * @link URL
 * @global type $varname Description.
 * @global type $varname Description.
 *
 * @param type $var Description.
 * @param type $var Optional. Description. Default.
 * @return type Description.
 */
 
The following is a list of what should be documented in WordPress files:
Functions and class methods
Classes
Class members (including properties and constants)
Requires and includes
Hooks (actions and filters)
Constants

3. Plugin Header Requirements
The follow is a list of header comments:

Plugin Name: (required) The name of your plugin, which will be displayed in the Plugins list in the WordPress Admin.
Plugin URI: The home page of the plugin, which should be a unique URL, preferably on your own website. This must be unique to your plugin. You cannot use a WordPress.org URL here.
Description: A short description of the plugin, as displayed in the Plugins section in the WordPress Admin. Keep this description to fewer than 140 characters.
Version: The current version number of the plugin, such as 1.0 or 1.0.3.
Author: The name of the plugin author. Multiple authors may be listed using commas.
Author URI: The author’s website or profile on another website, such as WordPress.org.
License: The short name (slug) of the plugin’s license (e.g. GPL2, Apache, MIT). More information about licensing can be found in the WordPress.org guidelines.
License URI: A link to the full text of the license (e.g. https://www.gnu.org/licenses/gpl-2.0.html).
Text Domain: The gettext text domain of the plugin. More information can be found in the Text Domain section of the How to Internationalize your Plugin page.
Domain Path: The domain path let WordPress know where to find the translations. More information can be found in the Domain Path section of the How to Internationalize your Plugin page.

- Use php comment blocks /* Variable: Value */ not double slashes // Variable: Value
- Why use Licensing? it's required if you want your plugin in the WordPress plugin repository
- Place license in your plugin head after your header comments

4. Folder Structure / Plugin Name executible is plugin-name.php not index.php which contains "<?php // Silence is golden" so to prevent directory browsing

5. ABSPATH - (WordPress Absolute Path) can be used to add to the top of every plugin file to check for proper instantiation. This prevents direct access to your plugin files from via outside scripts or crawlers.
if(!defined('ABSPATH')){ die; } or defined('ABSPATH') or die('Hack attempt');

Other cool constants builtin to WordPress:

DOING_AJAX - run some code only when a WordPress ajax request is running
if(is_admin() && (!defined(‘DOING_AJAX’) || !DOING_AJAX)){ // do something }
DOING_CRON - run some code only when a WordPress cron job is running
if(defined(‘DOING_CRON) && DOING_CRON){ // do something }

6. class_exists or function_exists - A function for checking if your class or function is already loaded in WordPress. This is used to avoid code conflicts and prevent errors and broken code.
if(!function_exists('my_custom_function_name')){
  // run code
}
if(!class_exists('ClassName')){
  // run code
}
if(!method_exists($classvar, 'MethodName')) {
  // run code
}

- PHP Visibility Methods:
 Public - Can be accessed everywhere
 Protected - Can be accessed within the class or extensions of the class
 Private -  Can be accessed only within the class
 
- Class Visibility Methods:
  final - do not allow extension of the class to other classes

7. Unique Class Name or Function Names - use a unique name as to not conflict with any other plugins.
Use casing: Pascal Case (ExampleClass), Camel Case (exampleClass), Underscore (example_class)

- PHP recommends PSR-1 (PHP Standard Recommendation 1) and PSR-2

7. Activation / Deactivation / Uninstall Hooks
Activation and deactivation hooks provide ways to perform actions when plugins are activated or deactivated.

On activation, plugins can run a routine to add rewrite rules, add custom database tables, or set default option values.
register_activation_hook( __FILE__, 'pluginprefix_callback_function_to_run' );
On deactivation, plugins can run a routine to remove temporary data such as cache and temp files and directories.
register_deactivation_hook( __FILE__, 'pluginprefix_callback_function_to_run' );
On uninstall, plugins can clean up themselves from the system such as any plugin options and/or settings specific to to the plugin, and/or other database entities such as tables 
register_uninstall_hook(__FILE__, 'pluginprefix_function_to_run');

 - Use Constants for plugin directory paths

8. Security and Validation - Please keep in mind that your code may be running across hundreds, perhaps even millions, of websites, so security is of the utmost importance.
Make sure your plugin follows the following best practices:

Check user capabilities - If your plugin allows users to submit data—be it on the Admin or the Public side—it should check for User Capabilities.
Validate - Data validation is the process of analyzing the data against a predefined pattern (or patterns) with a definitive result: valid or invalid.
Sanitize input - Securing input is the process of sanitizing (cleaning, filtering) input data.
Sanitize output - Securing output is the process of escaping output data. Escaping means stripping out unwanted data, like malformed HTML or script tags.
Nonces - Nonces are generated numbers used to verify origin and intent of requests for security purposes. Each nonce can only be used once. If your plugin allows users to submit data; be it on the Admin or the Public side; you have to make sure that the user is who they say they are.

9. Creating a custom post type gallery 

10. Extending the custom post type gallery with custom content blocks and meta data

11. Using Composer Autoload and Learning Namespaces



Helpful Links:

Composer - https://getcomposer.org/download/

Dashicons for Custom Post Types - https://developer.wordpress.org/resource/dashicons/

PHP Standards Recommendations - https://www.php-fig.org/psr/

WordPress Licensing & the GPL - https://developer.wordpress.org/themes/getting-started/wordpress-licensing-the-gpl/

Object Oriented Programming Tutorial - https://code.tutsplus.com/tutorials/two-ways-to-develop-wordpress-plugins-object-oriented-programming--wp-27716

WordPress Plugin Security - https://developer.wordpress.org/plugins/security/

WordPress Plugin Boilerplate - http://wppb.io/

Admin Page Class - https://github.com/bainternet/Admin-Page-Class/
